#####################################################################
#  Probe
#####################################################################
[probe]
pin: PG15
x_offset: -1.5
y_offset: 10.75
z_offset: 13.2
speed: 4
samples: 3
samples_result: median
sample_retract_dist: 1.0
samples_tolerance: 0.01
samples_tolerance_retries: 5

####################################################################
#Z Tilt Adjust
####################################################################

[z_tilt]
z_positions:
  10, 2
  137, 255
  265, 2
# A list of X,Y coordinates (one per line; subsequent lines
# indented) describing the location of each bed "pivot point". The
# "pivot point" is the point where the bed attaches to the given Z
# stepper. It is described using nozzle coordinates (the XY position
# of the nozzle if it could move directly above the point). The
# first entry corresponds to stepper_z, the second to stepper_z1,
# the third to stepper_z2, etc. This parameter must be provided.
points: 
  20, 0
  137, 215
  235, 0
  # A list of X,Y coordinates (one per line; subsequent lines | back |
# indented) that should be probed during a Z_TILT_ADJUST command. | |
# Specify coordinates of the nozzle and be sure the probe is above L z1 z R
# the bed at the given nozzle coordinates. This parameter must be | |
# provided. | front |
speed:  300
horizontal_move_z: 25
retries: 3
# Number of times to retry if the probed points aren't within
# tolerance.
retry_tolerance:0.01
# If retries are enabled then retry if largest and smallest probed
# points differ more than retry_tolerance. Note the smallest unit of
# change here would be a single step. However if you are probing
# more points than steppers then you will likely have a fixed
# minimum value for the range of probed points which you can learn
# by observing command output.

[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
description:
gcode:
    status_leveling
    {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
    {% if user %}
        { action_respond_info("Z Tilt Adjust") }
    {% endif %}
    {% set move_z = [user.z_hop, printer.toolhead.position.z]|max %} # calc movement high
    _SET_Z_CURRENT VAL=HOME
    {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}
    G90
    G0 Z{move_z} F{user.speed.z_hop}# move bed down to ensure Probe is not triggered in error case
    ATTACH_PROBE
    _Z_TILT_ADJUST {% for p in params
          %}{'%s=%s ' % (p, params[p])}{%
         endfor %}
    DETACH_PROBE
   {% if params.HOME|default('true')|lower == 'true' %} G28 Z {% endif %}
   _SET_Z_CURRENT
   {% if params.PARK|default('true')|lower == 'true' %}
     G90
     G0 X{user.park.bed.x} Y{user.park.bed.y} Z{user.park.bed.z} F{user.speed.travel}
   {% endif %}
   {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} # set back to relative
   status_ready

[gcode_macro CHECK_ZTA]
description: Run after Z_TILT_ADJUST to ensure it passes
gcode:
  {% set user        = printer['gcode_macro _USER_VARIABLE'] %}
  {% set probe_state = printer['gcode_macro _MAG_PROBE'].state|default('unknown')|lower %} # get probe state
  {% set probe_ok    = False if user.hw.mag_probe.ena and (probe_state == 'error' or probe_state == 'unknown')
                  else True %}  
  {% if not printer.z_tilt_adjust.applied or not probe_ok %} # check ZTA and probe status
    {action_respond_info("ZTA CHECK: FAILED BITCH! Canceling the print!")}
    PAUSE_BASE
    G90
    G0 Z{user.z_hop} F{user.speed.z_hop}                                 # move nozzle to z high first
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} # set back to relative
    {% if user.hw.mag_probe.ena %} DETACH_PROBE {% endif %}
    CANCEL_PRINT PARK=1 ERROR=1
  {% else %}
    {action_respond_info("ZTA CHECK: PASS, MOTHERFUCKER!")}
  {% endif %}    
